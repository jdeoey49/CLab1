// Lab5.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <iomanip> 
using namespace std;
//copied from the script function is to output on cmd a unsigned number in the form of its single bits
void displayBits(unsigned value) {
	//create a variable for shifting a single bit multiple times
	//the exact amount of shifts we want to do is 8 * sizeof(unsigned) - 1
	// 8 because of 8 bits and -1 because we always need one shift less 
	//because our number is already at pos 1 and 1 shift will lead to the number being at pos 2
	//sizeof will return a value in bytes
	const int SHIFT = 8 * sizeof(unsigned) - 1; 
	//{ 8 * sizeof(unsigned) - 1 };
	//SHIFT = 8 * sizeof(unsigned) - 1;
	//shift the number 1 SHIFT times to left  
	//the mask will then look like 1000 ... 0000
	//while our value might be any bit combination, e.g. 0111
	const unsigned MASK{ static_cast<unsigned>(1 << SHIFT) };
	//give the original value
	cout << setw(12) << value << " = ";
	for (unsigned c{ 1 }; c <= SHIFT + 1; ++c) {
		//if the masked value is 1 display 1 else 0
		cout << (value & MASK ? '1' : '0');
		//shift the value with one bit to the left and store the result in value
		value <<= 1;
		//equal to the statement value = value << 1;
		//display a space after 8 bits
		if (c % 8 == 0) {
			//single quotes are used because we only have one character which is the space character 
			//when having more characters we use the double quotes
			cout << ' ';
		}
	}
	cout << endl;
}

void task1() {
	//variable number of type unsigned int and init with zero
	unsigned int number = 0;
	cout << "Enter a number: ";
	//store the value given by the user into number
	cin >> number;
	cout << "Before the right shift operation:" << endl;	
	//display the bit values
	displayBits(number);
	//draw a extra line
	cout<< endl;
	//display the bit values
	cout << "After the right shift operation:" << endl;
	displayBits(number>>4);
}
//the number 12 *2 = 24 1100 *10 11000
//using bitshifiting we just have to add an additional zero at the right end of our number
//this even works with multiples of 2 you just have to shift so many times as the power tells you
//12*2^2 = 110000
int power2(int number, int power) {
	//equal to a left shift by power
	return number << power;
}
//in signed numbers the number -1 looks like this 1000001 the first bit is used to decode the sign
//in unsigned the number -1 does not exist at all
//there is just the number 1 which looks like 00000001
//this grants us an additional bit to store values
//and expands our range of values 
//a character uses all 8 bits to decode itself
//
void task2() {
	//create two variables of type unsigned int and init them with 0
	unsigned int number = 0, power = 0;
	cout << "Enter a number and a power: ";
	//read data from user and put it inside number and power
	cin >> number>> power;
	//display number
	cout << "number" << endl;	
	displayBits(number);
	//display power
	cout << "power:" << endl;
	displayBits(power);
	//display the computation of number multiplied with the result of
	//2 with power as its exponent
	cout << number<<"*"<<2<<"^"<<power<< endl;
	displayBits(power2(number,power));
}

unsigned packCharacters(char a, char b, char c, char d) {
	//create a variable and store a in its first 8 bits
	//the cast operator will put the given variable in the unsigned format 
	//by converting the bits to generate a variable of the type unsigned
	//one can also write unsigned pack{static_cast<unsigned>(a)} instead of the given statemend
	//this is just another way of writing the below statement
	unsigned pack = static_cast<unsigned>(a);
	//shift the digits 8 times to the left 
	pack <<= 8;	
	//store b in the first 8 bits of pack
	pack |= static_cast<unsigned>(b);
	//shift the digits 8 times to the left 
	pack <<= 8;	
	//store c in the first 8 bits of pack
	pack += static_cast<unsigned>(c);
	//shift the digits 8 times to the left 
	pack <<= 8;	
	//store d in the first 8 bits of pack
	pack += static_cast<unsigned>(d);
	return pack;
}

unsigned task3() {
	//create four variables of type character
	char a, b, c, d;
	//read four characters from user input and put them into a b c d
	cout << "Enter four characters a b c d: ";
	cin >> a;
	cin >> b;
	cin >> c;
	cin >> d;
	//display the variables and their values
	cout << "'" << a << "' in bits as an unsigned integer number is:" << endl;
	displayBits(a);
	cout << "'" << b << "' in bits as an unsigned integer number is:" << endl;
	displayBits(b);
	cout << "'" << c << "' in bits as an unsigned integer number is:" << endl;
	displayBits(c);
	cout << "'" << d << "' in bits as an unsigned integer number is:" << endl;
	displayBits(d);
	cout << endl;
	//pack them into one variable and display this variable
	cout << "The characters packed in an unsigned integer:" << endl;
	unsigned test = packCharacters(a, b, c, d);
	displayBits(test);
	return test;
}
//take the value of packing step
void unpackCharacters(unsigned number) {
	//create two variables one for shifting and one for masking
	const int SHIFT = 8 * sizeof(unsigned);
	//first mask looks like 11111111 0000....
	unsigned MASK{ static_cast<unsigned>(255 << SHIFT-8) };
	cout << "Let's show the masks:" << endl;
	//show the mask
	displayBits(MASK);
	int shifty = 24;
	//use the mask to filter out a and shift a from its position 32-25 Bit to position 8-1 Bit
	char a = static_cast<char>((MASK&number) >> shifty);
	//move the mask 8 Bits to the right and show it
	MASK >>= 8;
	displayBits(MASK);
	shifty -= 8;
	//use the mask to filter out b and shift b from its position 24-17 Bit to position 8-1 Bit
	char b = static_cast<char>((MASK&number) >> shifty);
	//move the mask 8 Bits to the right and show it
	MASK >>= 8;
	displayBits(MASK);
	shifty -= 8;
	//use the mask to filter out c and shift c from its position 16-9 Bit to position 8-1 Bit
	char c = static_cast<char>((MASK&number) >> shifty);
	//move the mask 8 Bits to the right and show it
	MASK >>= 8;
	displayBits(MASK);
	shifty -= 8;
	//use the mask to filter out d no shift is needed for d 
	char d = static_cast<char>((MASK&number) >> shifty);
	//display the packed
	cout<<"The characters packed in an unsigned integer:" << endl;
	displayBits(number);
	cout << endl;
	cout << "The unpacked bits are: " << a << " " << b << " " << c << " " << d<<endl;
	cout << endl;
	//display the unpacked
	cout << "The unpacked characters in bits are:" << endl;
	displayBits(a);
	displayBits(b);
	displayBits(c);
	displayBits(d);
}

void task4(unsigned num) {
	unpackCharacters(num);
}

int main()
{
	unsigned totest;
    std::cout << "Hello World!\n"; 
	for (int i = 0; i < 4; i++) {
		cout << "Task " << i+1 << endl;
		if (i == 0) {
			task1();
		}
		else if (i == 1) {
			task2();
		}
		else if (i == 2) {
			totest = task3();
		}
		else {
			task4(totest);
		}
		cout << "Task " << i+1 <<" finished"<< endl;
		cout << endl;
	}
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
