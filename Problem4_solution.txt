//Computing 1 Lab4
#include<iostream>
#include<vector>
#include<iomanip>
#include<limits>
using namespace std;
void task1();
void task2();
void task3();
double average(vector<int>);//task1 
void getsalesdata(vector<vector<double>>&);//task2
void display(const vector<vector<double>>&);//task2
void wages(vector< double > &); // task3
void display2(const vector< double > &); // task3
int main()
{
	int i=0;
	cout << "Input task number:";
	cin >> i;
	switch(i)
	{
	case 1:
		task1();
		break;
	case 2:
		task2();
		break;
	case 3:
		task3();
		break;
	default:
		cout << "Invalid task input" << endl;
	}
	return 0;
}
void task1()
{
	vector<int> input;
	int i = 0;
	cout << "Input a serial of number and press -1 to exit" << endl;
	while (cin >> i && i != -1)
	{
		input.push_back(i);
	}
	cout << fixed;
	cout<<"average:"<<setprecision(2)<<average(input)<<endl;
}
void task2()
{
	const size_t PEOPLE = 5; const size_t PRODUCTS = 6;
	vector<vector<double>> sales(PEOPLE, vector<double>(PRODUCTS));
	// This vector can be visualised as a two dimensional array, e.g., sales[i][j],
	// with 'PEOPLE' rows and 'PRODUCT' columns.
	for (int i = 0; i < sales.size() - 1; i++) {
		for (int j = 0; j < sales[0].size() - 1; j++) {
			sales[i][j] = 0;
		}
	}
	getsalesdata(sales);
	cout << "Reading data" << endl;
	display(sales);
}
void task3()
{
	vector< double > salaries; // vector to hold salaries 
	wages(salaries); // get wages
	display2(salaries); // display wages and their ranges return 0;
	return;
}
double average(vector<int> getinput)
{
	double total = 0;
	int elements = getinput.size();
	for (int i = 0; i < elements; i++)
	{
		total = total + getinput[i];
	}
	return static_cast<double>(total / elements);
}
void getsalesdata(vector<vector<double>>& sales)
{
	cout << "Enter the total sales <1-4>, product numbers <1-5>, and total sales" << endl;
	cout << "Enter -1 to end input" << endl;
	int person;
	int product;
	int total;
	while (1)
	{
		cin >> person;
		if (cin.fail() || cin.eof() || person > 4 || person == -1)
		{
			cout << "invalid salesperson input" << endl;
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			return;
		}
		cin >> product;
		if (cin.fail() || cin.eof() || product > 5 || product == -1)
		{
			cout << "invalid product number input" << endl;
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			return;
		}
		cin >> total;
		if (cin.fail() || cin.eof() || total < 0)
		{
			cout << "invalid total sales input" << endl;
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			return;
		}
		cout << "You enter:" << person << " " << product << " " << total;
		sales[person - 1][product - 1] += total;
		//to store the sum of an individual seller
		sales[person - 1][sales[0].size() - 1] += total;
		// to store the sums of a product sold
		sales[sales.size() - 1][product - 1] += total;

	}
}
void display(const vector<vector<double>>& sales)
{
	cout << "print out the table" << endl;
	cout << fixed;
	cout << setprecision(2);
	cout << " ";
	for (int i = 1; i < sales[0].size(); i++)
	{
		cout << setw(12) << i;
	}
	cout << setw(12) << "Total" << endl;
	for (int i = 0; i < sales.size() - 1; i++)
	{
		cout << i + 1;
		for (int j = 0; j < sales[i].size(); j++)
		{
			cout << setw(12) << sales[i][j];
		}
		cout << endl;
	}
	cout << "Total" << setw(8);
	for (int i = 0; i < sales[0].size() - 1; i++)
	{
		cout << sales[sales.size() - 1][i] << setw(12);
	}
	cout << endl;
}
void wages(vector< double > &salaries)
{
	int sales;
	double earn;
	//cout << "Enter emplyee gross sales <-1 to end>:";
	while (1)
	{
		cout << "Enter employee gross sales <-1 to end>:";
		cin >> sales;
		if (cin.eof() || cin.fail() || sales == -1)
		{
			cout << "invalid input" << endl;
			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			return;
		}
		earn = sales * 0.09 + 200;
		cout << "Employee comission is:" << fixed << setprecision(2) << earn << endl;
		salaries.push_back(earn);
	}
}
void display2(const vector< double > &salaries)
{
	int distribution[9] = {};
	cout << "Employee income:" << endl;
	cout << fixed;
	for (int i = 0; i < salaries.size(); i++)
	{
		cout << "Income salesperson[" << i + 1 << "]:" << setprecision(2) << salaries[i] << endl;
	}
	cout << "Employee income distribution:" << endl;
	for (int i = 0; i < salaries.size(); i++)
	{
		if (salaries[i] >= 1000)
			distribution[8] += 1;
		else if (salaries[i] < 1000 && salaries[i] >= 900)
			distribution[7] += 1;
		else if (salaries[i] < 900 && salaries[i] >= 800)
			distribution[6] += 1;
		else if (salaries[i] < 800 && salaries[i] >= 700)
			distribution[5] += 1;
		else if (salaries[i] < 700 && salaries[i] >= 600)
			distribution[4] += 1;
		else if (salaries[i] < 600 && salaries[i] >= 500)
			distribution[3] += 1;
		else if (salaries[i] < 500 && salaries[i] >= 400)
			distribution[2] += 1;
		else if (salaries[i] < 400 && salaries[i] >= 300)
			distribution[1] += 1;
		else
			distribution[0] += 1;
	}
	cout << "200-299 Euro:" << distribution[0] << endl;
	cout << "300-399 Euro:" << distribution[1] << endl;
	cout << "400-499 Euro:" << distribution[2] << endl;
	cout << "500-599 Euro:" << distribution[3] << endl;
	cout << "600-699 Euro:" << distribution[4] << endl;
	cout << "700-799 Euro:" << distribution[5] << endl;
	cout << "800-899 Euro:" << distribution[6] << endl;
	cout << "900-999 Euro:" << distribution[7] << endl;
	cout << "over 1000 Euro:" << distribution[8] << endl;
	return;
}
